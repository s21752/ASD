import time

def swap(array, index1, index2):
    temp = array[index1]
    array[index1] = array[index2]
    array[index2] = temp


# Bubble sort
def bubble_sort(array):
    for i in range(0, len(array)):
        for j in range(0, len(array) - i - 1):
            if (array[j + 1] < array[j]):
                swap(array, j+1, j)
    
# Heap sort
def left(index):
    return 2 * index + 1

def right(index):
    return 2*(index + 1)

def heapify(heap, i, end, shortening = False):
    l = left(i)
    r = right(i)
    
    if l <= len(heap) - 1 - end and heap[l] > heap[i]:
        largest = l
    else:
        largest = i
    if r <= len(heap) - 1 - end and heap[r] > heap[largest]:
        largest = r
    if i != largest:
        swap(heap, largest, i)
        if (shortening) :
            end += 1
        heapify(heap, largest, end, shortening)
        
def build_heap(array):
    middle = (len(array) // 2) - 1
    
    while middle >= 0:
        heapify(array, middle, 0)
        middle -= 1

def heap_sort(array):
    build_heap(array)
    swap(array, 0, len(array) - 1)

    for i in range(1, len(array)):
        heapify(array, 0, i, True)
        swap(array, 0, len(array) - 1 - i)
    
# Quick sort
def partition(list, p, r):
    pivot = list[r]
    smaller = p
    for j in range(p, r):
        if list[j] <= pivot:
            swap(list, smaller, j)
            smaller = smaller + 1
    swap(list, smaller, r)
    return smaller

def quick_sort(list, p, r):
    if (p < r):
        q = partition(list, p, r)
        quick_sort(list, p, q-1)
        quick_sort(list, q+1, r)
    
    
    
    
    
random1 = [81,21,20,98,3,10,14,13,48,30,59,67,49,18,65,24,43,24,39,6,63,46,60,30,78,90,87,43,63,54,43,56,2,25,20,76,2,22,63,93,56,74,3,28,43,51,55,17,11,65,83,72,18,23,18,48,43,68,86,21,65,23,85,76,83,66,98,88,26,38,13,57,43,70,94,0,26,37,7,69,25,16,12,86,92,18,34,18,49,44,97,61,14,76,38,60,81,92,44,46,87,51,45,41,3,5,55,14,29,46,87,68,99,43,11,16,10,17,17,97,50,68,4,10,69,14,65,39,30,5,26,59,36,84,95,8,28,21,66,81,45,75,86,67,10,49,15,92,24,26,58,45,47,36,64,47,12,93,60,73,38,74,51,77,88,85,30,44,17,12,89,15,23,50,79,15,73,93,31,56,83,63,71,98,49,31,24,98,19,40,2,15,36,97,4,99,51,33,82,80,26,91,30,92,11,66,56,12,25,7,99,55,67,96,57,68,2,50,65,40,88,4,19,72,27,27,70,66,39,38,71,28,29,57,66,81,85,47,6,64,48,87,17,7,84,54,12,34,22,89,11,89,86,82,40,40,41,70,96,11,3,92,31,67,43,7,96,95,23,1,81,12,18,13,26,78,29,38,73,71,42,9,18,82,75,41,51,91,79,6,10,49,15,98,15,0,34,79,98,43,8,92,65,33,18,67,84,10,24,92,56,97,83,33,24,8,18,66,98,89,42,58,79,81,77,41,67,85,86,48,75,68,99,78,12,98,98,56,32,29,59,90,12,12,66,12,50,66,90,73,81,84,27,76,91,27,84,10,94,15,54,80,80,78,33,99,17,44,34,72,38,68,76,72,71,89,50,43,79,60,2,57,8,42,64,36,60,72,39,91,58,2,67,59,24,45,61,73,1,29,99,53,84,4,70,87,82,31,21,93,51,1,51,68,35,77,92,7,45,62,48,92,12,6,69,80,50,45,68,72,81,57,74,28,77,8,76,3,95,36,22,88,71,98,25,73,36,70,11,70,66,1,59,62,29,73,64,71,81,71,36,0,26,18,11,98,6,29,52,69,78,72,23,53,37,85,45,60,6,10,77,93,97,97,87,24,26,75,75,89,3,96,50,80,15,62,49,96,93,49,90,30,50,38,97,59,66,2,37,8,17,4,76,80,85,16,79,62,26,32,78,7,86,28,99,97,54,13,83,25,76,69,42,16,73,55,37,35,87,86,47,11,72,49,85,96,9,48,26,21,26,12,70,44,77,23,70,97,37,8,2,35,52,38,71,81,28,95,95,87,97,62,65,31,88,47,56,61,0,59,50,37,45,88,5,16,84,79,23,56,97,13,79,57,63,49,31,87,27,55,43,73,4,16,61,96,16,91,39,84,28,20,88,48,51,64,93,26,32,52,94,64,1,91,29,79,5,91,64,17,5,57,29,76,79,30,44,74,94,9,66,77,63,90,12,79,42,13,79,38,39,76,79,44,14,17,78,4,39,23,16,96,84,26,2,0,75,9,10,54,43,71,85,18,66,25,51,46,29,75,59,68,18,74,57,84,12,41,24,30,98,9,46,76,38,57,70,89,52,81,45,10,3,7,94,43,36,25,69,30,67,39,69,61,38,16,5,60,21,35,15,16,68,96,3,98,46,75,98,66,87,85,10,81,34,23,65,1,95,24,16,17,46,77,74,42,5,15,49,86,74,66,5,61,30,66,9,78,68,6,6,19,15,27,66,44,28,46,92,3,87,40,67,24,13,58,22,68,94,13,89,58,64,48,94,24,72,14,30,0,54,55,40,9,61,56,43,83,31,44,36,60,17,71,69,30,95,34,28,28,0,54,4,80,96,7,50,88,52,96,58,57,5,82,43,44,76,79,9,82,22,49,21,69,26,15,40,68,70,91,15,76,72,39,64,47,9,57,68,39,75,67,26,79,59,2,65,94,77,44,73,48,16,68,30,35,76,79,54,16,95,59,39,4,61,55,30,59,23,7,28,96,5,67,37,36,81,69,38,63,20,28,13,70,92,22,40,83,41,57,55,2,62,91,51,11,7,24,41,84,82,79,86,80,69,48,83,82,70,38,81,13,42,47,41,23,30,59,98,96,33,71,96,72,10,5,91,67,9,78,24,70,29,51,94,46,77,63,5,73,18,6,41,84,1,6,50,39,59,28,90,84,69,61,53,74,37,28,35,87,80,59,87,87,58,60,14,11,97,43,0,63,73,72,7,83,16,32,82,50,4,28,68,54,87,73,16,4,80,51]

random2 = random1.copy()
random3 = random1.copy()

sorted1 = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996]

sorted2 = sorted1.copy()
sorted3 = sorted1.copy()

inversely_sorted1 = [996,995,994,993,992,991,990,989,988,987,986,985,984,983,982,981,980,979,978,977,976,975,974,973,972,971,970,969,968,967,966,965,964,963,962,961,960,959,958,957,956,955,954,953,952,951,950,949,948,947,946,945,944,943,942,941,940,939,938,937,936,935,934,933,932,931,930,929,928,927,926,925,924,923,922,921,920,919,918,917,916,915,914,913,912,911,910,909,908,907,906,905,904,903,902,901,900,899,898,897,896,895,894,893,892,891,890,889,888,887,886,885,884,883,882,881,880,879,878,877,876,875,874,873,872,871,870,869,868,867,866,865,864,863,862,861,860,859,858,857,856,855,854,853,852,851,850,849,848,847,846,845,844,843,842,841,840,839,838,837,836,835,834,833,832,831,830,829,828,827,826,825,824,823,822,821,820,819,818,817,816,815,814,813,812,811,810,809,808,807,806,805,804,803,802,801,800,799,798,797,796,795,794,793,792,791,790,789,788,787,786,785,784,783,782,781,780,779,778,777,776,775,774,773,772,771,770,769,768,767,766,765,764,763,762,761,760,759,758,757,756,755,754,753,752,751,750,749,748,747,746,745,744,743,742,741,740,739,738,737,736,735,734,733,732,731,730,729,728,727,726,725,724,723,722,721,720,719,718,717,716,715,714,713,712,711,710,709,708,707,706,705,704,703,702,701,700,699,698,697,696,695,694,693,692,691,690,689,688,687,686,685,684,683,682,681,680,679,678,677,676,675,674,673,672,671,670,669,668,667,666,665,664,663,662,661,660,659,658,657,656,655,654,653,652,651,650,649,648,647,646,645,644,643,642,641,640,639,638,637,636,635,634,633,632,631,630,629,628,627,626,625,624,623,622,621,620,619,618,617,616,615,614,613,612,611,610,609,608,607,606,605,604,603,602,601,600,599,598,597,596,595,594,593,592,591,590,589,588,587,586,585,584,583,582,581,580,579,578,577,576,575,574,573,572,571,570,569,568,567,566,565,564,563,562,561,560,559,558,557,556,555,554,553,552,551,550,549,548,547,546,545,544,543,542,541,540,539,538,537,536,535,534,533,532,531,530,529,528,527,526,525,524,523,522,521,520,519,518,517,516,515,514,513,512,511,510,509,508,507,506,505,504,503,502,501,500,499,498,497,496,495,494,493,492,491,490,489,488,487,486,485,484,483,482,481,480,479,478,477,476,475,474,473,472,471,470,469,468,467,466,465,464,463,462,461,460,459,458,457,456,455,454,453,452,451,450,449,448,447,446,445,444,443,442,441,440,439,438,437,436,435,434,433,432,431,430,429,428,427,426,425,424,423,422,421,420,419,418,417,416,415,414,413,412,411,410,409,408,407,406,405,404,403,402,401,400,399,398,397,396,395,394,393,392,391,390,389,388,387,386,385,384,383,382,381,380,379,378,377,376,375,374,373,372,371,370,369,368,367,366,365,364,363,362,361,360,359,358,357,356,355,354,353,352,351,350,349,348,347,346,345,344,343,342,341,340,339,338,337,336,335,334,333,332,331,330,329,328,327,326,325,324,323,322,321,320,319,318,317,316,315,314,313,312,311,310,309,308,307,306,305,304,303,302,301,300,299,298,297,296,295,294,293,292,291,290,289,288,287,286,285,284,283,282,281,280,279,278,277,276,275,274,273,272,271,270,269,268,267,266,265,264,263,262,261,260,259,258,257,256,255,254,253,252,251,250,249,248,247,246,245,244,243,242,241,240,239,238,237,236,235,234,233,232,231,230,229,228,227,226,225,224,223,222,221,220,219,218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198,197,196,195,194,193,192,191,190,189,188,187,186,185,184,183,182,181,180,179,178,177,176,175,174,173,172,171,170,169,168,167,166,165,164,163,162,161,160,159,158,157,156,155,154,153,152,151,150,149,148,147,146,145,144,143,142,141,140,139,138,137,136,135,134,133,132,131,130,129,128,127,126,125,124,123,122,121,120,119,118,117,116,115,114,113,112,111,110,109,108,107,106,105,104,103,102,101,100,99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71,70,69,68,67,66,65,64,63,62,61,60,59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]

inversely_sorted2 = inversely_sorted1.copy()
inversely_sorted3 = inversely_sorted1.copy()

# random data
quick_random_start = int(round(time.time() * 1000))
quick_sort(random1, 0, len(random1) - 1)
quick_random_time = int(round(time.time() * 1000)) - quick_random_start

bubble_random_start = int(round(time.time() * 1000))
bubble_sort(random2)
bubble_random_time = int(round(time.time() * 1000)) - bubble_random_start

heap_random_start = int(round(time.time() * 1000))
heap_sort(random3)
heap_random_time = int(round(time.time() * 1000)) - heap_random_start

# sorted data
quick_sorted_start = int(round(time.time() * 1000))
quick_sort(sorted1, 0, len(sorted1) - 1)
quick_sorted_time = int(round(time.time() * 1000)) - quick_sorted_start

bubble_sorted_start = int(round(time.time() * 1000))
bubble_sort(sorted2)
bubble_sorted_time = int(round(time.time() * 1000)) - bubble_sorted_start

heap_sorted_start = int(round(time.time() * 1000))
heap_sort(sorted3)
heap_sorted_time = int(round(time.time() * 1000)) - heap_sorted_start

# inversely sorted data
quick_inversely_sorted_start = int(round(time.time() * 1000))
quick_sort(inversely_sorted1, 0, len(inversely_sorted1) - 1)
quick_inversely_sorted_time = int(round(time.time() * 1000)) - quick_inversely_sorted_start

bubble_inversely_sorted_start = int(round(time.time() * 1000))
bubble_sort(inversely_sorted2)
bubble_inversely_sorted_time = int(round(time.time() * 1000)) - bubble_inversely_sorted_start

heap_inversely_sorted_start = int(round(time.time() * 1000))
heap_sort(inversely_sorted3)
heap_inversely_sorted_time = int(round(time.time() * 1000)) - heap_inversely_sorted_start


print("Quick sort random data time: " + str(quick_random_time))
print("Bubble sort random data time: " + str(bubble_random_time))
print("Heap sort random data time: " + str(heap_random_time))

print("\nQuick sort sorted data time: " + str(quick_sorted_time))
print("Bubble sort sorted data time: " + str(bubble_sorted_time))
print("Heap sort sorted data time: " + str(heap_sorted_time))

print("\nQuick sort inversely sorted data time: " + str(quick_inversely_sorted_time))
print("Bubble sort inversely sorted data time: " + str(bubble_inversely_sorted_time))
print("Heap sort inversely sorted data time: " + str(heap_inversely_sorted_time))
